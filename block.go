package main

import "fmt"

// the struct of Block
type Block struct {
	Timestamp string
	Prehash   string
	Hash      string
	Data      string
	Height    int
	Address   string
	//delegate    *Node
}

// first block: genesis block
func genesisBlock() Block {
	// Prehash have 64 bit, address have 8 bit
	gene := Block{time.Now().String(), "0000000000000000000000000000000000000000000000000000000000000000", "", "I'm the genesis block", 1, "0x0000"}
	blockchain = append(blockchain, gene)
	//gene.Hash = string(gene.calHash())
	gene.calHash()
	return gene
}

// the new version of generate the block
func generateBlock(oldBlock Block, data string, addr string) Block {
	newBlock := Block{}
	newBlock.Timestamp = time.Now().String() //Format("2020-01-01 00:00:00")
	newBlock.Prehash = oldBlock.Hash
	newBlock.calHash()
	newBlock.Data = data
	newBlock.Height = oldBlock.Height + 1
	newBlock.Address = addr
	return newBlock
}

// generate the block
func (node *Node) GenerateNewBlock(lastBlock Block, data string, addr string) Block {
	time.Sleep(3 * time.Second) // for easy use, every 3sec generate a block
	//Block{lastBlock.Height+1, time.Now().String(), lastBlock.Hash, "", data, addr, nil}
	newBlock := Block{}
	newBlock.Timestamp = time.Now().String()
	newBlock.Prehash = lastBlock.Hash
	newBlock.Data = data
	newBlock.Height = lastBlock.Height + 1
	newBlock.Address = addr
	//newBlock.Hash = hex.EncodeToString(newBlock.calHash())
	//newBlock.delegate = node
	return newBlock
}

// calculate the block hash
func (block *Block) calHash() {
	hashstr := strconv.Itoa(block.Height) + block.Timestamp + block.Prehash + block.Data + block.Address
	hash := sha256.Sum256([]byte(hashstr))
	block.Hash = hex.EncodeToString(hash[:])
	//h := sha256.New()
	//h.Write(hash)
	//hashed := h.Sum(nil)
	//return hashed
}

// validate the block generated by delegate
func isBlockValid(newBlock, oldBlock Block) bool {
	fmt.Println("\n------------------Validating the block...--------------------\n")
	waitingTime()

	for i := 0; i < delegateNum; i++ {
		// TODO: validate delegateNum delegate nodes
		//
	}

	// validate height and prehash
	if oldBlock.Height+1 != newBlock.Height {
		fmt.Println("\nValidation failed! Wrong Height!\n")
		return false
	} else {
		fmt.Println("\nBlock Height validating successful!\n")
	}
	if newBlock.Prehash != oldBlock.Hash {
		fmt.Println("\nValidation failed! Wrong Prehash!")
		return false
	} else {
		fmt.Println("Block Prehash validating successful!\n")
	}
	fmt.Println("\n-------------------Block validated!--------------------\n")
	return true
}
